LBA / 64 bit == 64 addr
512 / 8 byte == 64 addr   1 TiB
||
LBA / 32 bit == 128 addr
512 / 4 byte == 128 addr  4 GiB

-----------------------------------------------------------------------------------------------
                                  | 256 x 4GiB|         (2^16)      (4GiB)     (2^16)         |
                                  | 8-bit addr|    16-bit low addr    | 16-bit high addr      |
0000.0000 | 0000.0000 | 0000.0000 | 0000.0000 | 0000.0000 | 0000.0000 | 0000.0000 | 0000.0000 |

-----------------------------------------------------------------------------------------------


///////////////////////////////////////////////////////////////////////
[ROOT] [STRUCTURE] [LAYOUT] [ALL 64-bit]

/ [0x00000000]
    dir/ [0x00000008]
        file [0x00000000]

    dir/ [0x00000010]
        file [0x00000000]

    dir/ [0x00000018]
        dir/ [0x00000000]
            file [0x00000000]

        dir/ [0x00000000]
            file [0x00000000]
    
    file [0x00000020]


-----------------------------------------------------------------------
[LAST-MK-ADDR-SPACE]


-----------------------------------------------------------------------
[BIT-MAP] 2-LBA / 64 bit == 128 addr | 64b * 128addr == 8192 bit | 8192 bit * 1-LBA == 4096 KiB

while( curr_lba < ttl_lba ){
    
    from curr_lba -> to each of 8192 bit represent 2-LBA

}


0   0000.0000 0000.0000 0000.0000 0000.0000 0000.0000 0000.0000 0000.0000 0000.0000 
1   0000.0000 0000.0000 0000.0000 0000.0000 0000.0000 0000.0000 0000.0000 0000.0000 
...
127 0000.0000 0000.0000 0000.0000 0000.0000 0000.0000 0000.0000 0000.0000 0000.0000 


2-LBA == 8192 LBAs


[BIT-MAP] [0] BASE + [LBA-1024] + (8192 - 2) LBAs
    from [1024] -> [1026] is [BIT-MAP] x 2-LBAs

[BIT-MAP] [1] BASE + [LBA- 9216 ] + (8192 - 2) LBAs
    from [9216] -> [9218] is [BIT-MAP] x 2-LBAs

















-----------------------------------------------------------------------
[DATA]





-----------------------------------------------------------------------
[BIN] [LAST-RM-ADDR-SPACE] [END <- 1024 LBA]


///////////////////////////////////////////////////////////////////////



















