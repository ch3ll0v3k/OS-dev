# =====================================================================
# [cxx] -fno-use-cxa-atexit     << memory managment
# [c  ] -nostdlib               << libraries, glibc
# [c  ] -fno-builtin            << 
# [cxx] -fno-rtti               << -fno-rtti Disable generation of information about every class with virtual functions for use by the C++ runtime type identification features (dynamic_cast' andtypeid'). If you don't use those parts of the language, you can save some space by using this flag.
# [c  ] -fno-exceptions         << 
# [c  ] -fno-leading-underscore << naming of the ASM sections

# == GCC_PARAMD = -m32 -nostdlib -fno-builtin -fno-exceptions -fno-leading-underscore
# == AS_PARAMD = --32
# == LD_PARAMS = -melf_i386
# == OBJECTS = loader.o kernel.o

# == ROOT = ./
# == BOOT = $(ROOT)boot/
# == GRUB = $(BOOT)grub/

# == %.o: %.c
# ==     gcc $(GCC_PARAMD) -o $@ -c $<

# == %.o: %.s
# ==     as $(AS_PARAMD) -o $@ -c $<

# == kernel.bin: linker.ld $(OBJECTS)
# ==     ld $(LD_PARAMS) -T $< -o $@ $(OBJECTS)

# == intstall: kernel.bin
# ==     cp $< $(BOOT)kernel.bin

# == clean:
# ==     rm -f *.o && rm -f *.bin


# =====================================================================
#!/bin/bash

# =====================================================================
# os/boot/grub/grub.cfg

# ./os/v2/* >>
ROOT="os"
SRC="src"
BIN="bin"

# ./src/* >>
O="obj"
C="c"
LD="ld"
ASM="asm"




P0=$1; P1=$2; P2=$3

# =====================================================================
LL="----------------------------------------------------------\n"

if [[ $P0 == "" && $P1 == "" && $P2 == "" ]]; then
    echo -e "./build [ all | 1 1 1 ]";

fi

if [[ $P0 == "all" ]]; then
    P0=1; P1=1; P2=1
fi

# =====================================================================
if [[ $P0 == 1 ]]; then
    echo -e "$LL[+] clean\n"
    rm ./src/obj/*.o 
    rm ./os/boot/kernel.bin 
    rm ./bin/kernel.bin 
    rm ./os.iso

fi

# =====================================================================
OPT="-O2"
#OPT=""

# == GCC_PARAMD = -m32 -nostdlib -fno-builtin -fno-exceptions -fno-leading-underscore
# == AS_PARAMD = --32
# == LD_PARAMS = -melf_i386
# == OBJECTS = loader.o kernel.o

GCC_PARAMD="-m32 -nostdlib -fno-builtin -fno-exceptions -fno-leading-underscore"
GCC_PARAMD_2="-ffreestanding $OPT -std=gnu99 -ffreestanding -Wall -Wextra"

OBJECTS_1="$O/kernel_system.o $O/kernel_string.o $O/kernel_stdio.o $O/kernel_terminal.o"
OBJECTS_2="$O/kernel_idt.o $O/kernel_isr.o $O/kernel_utils.o $O/kernel_ata_pio.o"
OBJECTS_3="$O/kernel_gdt.o $O/kernel_timer.o $O/kernel_os.o $O/kernel_acpi.o "
OBJECTS_4="$O/kernel_dev_mod.o"

OBJECTS_ALL=" $OBJECTS_1 $OBJECTS_2 $OBJECTS_3 $OBJECTS_4"

LD_PARAMD="-T $LD/linker.ld -m elf_i386 $OPT -nostdlib"
LD_CMD="ld $LD_PARAMD -o ../$BIN/kernel.bin $O/kernel_asm.o $O/kernel_c.o $OBJECTS_ALL"

sync

cd $SRC

R="\033[01;31m";
G="\033[01;32m";
B="\033[01;34m";
W="\033[01;37m";

E="\033[0m";

#pwd; ls -lah; exit;

if [[ $P1 == 1 ]]; then

    # echo $P | sed 's/-c /\n-c /g'

    P="as --32 --warn $ASM/kernel.s -o $O/kernel_asm.o"
    P="nasm -f elf32 $ASM/kernel.asm -o $O/kernel_asm.o"

    ALT="[$R kernel_asm.s $E] \n"; echo -e "\n $ALT $W $P $E "; $($P)

    P="gcc $GCC_PARAMD -c $C/kernel.c -o $O/kernel_c.o $GCC_PARAMD_2"
    ALT="[$B kernel_c.o $E] \n"; echo -e "\n $ALT $W $P $E "; $($P)

    P="gcc $GCC_PARAMD -c $C/kernel_utils.c -o $O/kernel_utils.o $GCC_PARAMD_2"
    ALT="[$B kernel_utils.o $E] \n"; echo -e "\n $ALT $W $P $E "; $($P)

    P="gcc $GCC_PARAMD -c $C/kernel_isr.c -o $O/kernel_isr.o $GCC_PARAMD_2"
    ALT="[$B kernel_isr.o $E] \n"; echo -e "\n $ALT $W $P $E "; $($P)

    P="gcc $GCC_PARAMD -c $C/kernel_idt.c -o $O/kernel_idt.o $GCC_PARAMD_2"
    ALT="[$B kernel_idt.o $E] \n"; echo -e "\n $ALT $W $P $E "; $($P)

    P="gcc $GCC_PARAMD -c $C/kernel_gdt.c -o $O/kernel_gdt.o $GCC_PARAMD_2"
    ALT="[$B kernel_gdt.o $E] \n"; echo -e "\n $ALT $W $P $E "; $($P)

    P="gcc $GCC_PARAMD -c $C/kernel_timer.c -o $O/kernel_timer.o $GCC_PARAMD_2"
    ALT="[$B kernel_timer.o $E] \n"; echo -e "\n $ALT $W $P $E "; $($P)

    P="gcc $GCC_PARAMD -c $C/kernel_os.c -o $O/kernel_os.o $GCC_PARAMD_2"
    ALT="[$B kernel_os.o $E] \n"; echo -e "\n $ALT $W $P $E "; $($P)

    P="gcc $GCC_PARAMD -c $C/kernel_ata_pio.c -o $O/kernel_ata_pio.o $GCC_PARAMD_2"
    ALT="[$B kernel_ata_pio.o $E] \n"; echo -e "\n $ALT $W $P $E "; $($P)

    P="gcc $GCC_PARAMD -c $C/kernel_acpi.c -o $O/kernel_acpi.o $GCC_PARAMD_2"
    ALT="[$B kernel_acpi.o $E] \n"; echo -e "\n $ALT $W $P $E "; $($P)

    P="gcc $GCC_PARAMD -c $C/kernel_dev_mod.c -o $O/kernel_dev_mod.o $GCC_PARAMD_2"
    ALT="[$B kernel_dev_mod.o $E] \n"; echo -e "\n $ALT $W $P $E "; $($P)

    P="gcc $GCC_PARAMD -c $C/kernel_terminal.c -o $O/kernel_terminal.o $GCC_PARAMD_2"
    ALT="[$B kernel_terminal.o $E] \n"; echo -e "\n $ALT $W $P $E "; $($P)

    P="gcc $GCC_PARAMD -c $C/kernel_stdio.c -o $O/kernel_stdio.o $GCC_PARAMD_2"
    ALT="[$B kernel_stdio.o $E] \n"; echo -e "\n $ALT $W $P $E "; $($P)

    P="gcc $GCC_PARAMD -c $C/kernel_string.c -o $O/kernel_string.o $GCC_PARAMD_2"
    ALT="[$B kernel_string.o $E] \n"; echo -e "\n $ALT $W $P $E "; $($P)

    P="gcc $GCC_PARAMD -c $C/kernel_system.c -o $O/kernel_system.o $GCC_PARAMD_2"
    ALT="[$B kernel_system.o $E] \n"; echo -e "\n $ALT $W $P $E "; $($P)


    echo -e "\n  [$R ../$BIN/kernel.bin $E]";
    echo -e "$W $LD_CMD $E"
    $($LD_CMD)
    
    echo -e "$LL [$G ALL-DONE $E]\n";

    # exit;
fi

# =====================================================================
if [[ $P2 == 1 ]]; then

    cd ..
    #echo -e "ISO - Disabled\n"
    
    echo -e "$LL[+] cp $BIN/kernel.bin $ROOT/boot/"
    cp $BIN/kernel.bin os/boot/

    echo -e "$LL[+] grub-mkrescue --modules=/usr/lib/grub/i386-pc/ -o os.iso\n"
    #grub-mkrescue --modules=/usr/lib/grub/i386-pc/ -o os.iso ./os/
    grub-mkrescue -o os.iso ./os/

fi

# =====================================================================


# echo -e " 1: \033[01;30m grey     \033[0m" # bold -> grey
# echo -e " 2: \033[01;31m red      \033[0m" # bold -> red
# echo -e " 3: \033[01;32m green    \033[0m" # bold -> green
# echo -e " 4: \033[01;33m yellow   \033[0m" # bold -> yellow
# echo -e " 5: \033[01;34m blue 1   \033[0m" # bold -> blue
# echo -e " 6: \033[01;35m purple   \033[0m" # bold -> purple
# echo -e " 7: \033[01;36m blue 2   \033[0m" # bold -> green-blue
# echo -e " 8: \033[01;37m white    \033[0m" # bold -> white




