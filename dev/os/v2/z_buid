#!/bin/bash

# =====================================================================
# os/boot/grub/grub.cfg

# ./os/v2/* >>
ROOT="os"
SRC="src"
BIN="bin"

# ./src/* >>
_OBJ="obj"
_C="c"
_H="h"
_LD="ld"
_ASM="asm"


cd $SRC


P0=$1; P1=$2; P2=$3

# =====================================================================
LL="----------------------------------------------------------\n"

if [[ $P0 == "" && $P1 == "" && $P2 == "" ]]; then
    echo -e "./build [ all | 1 1 1 ]";

fi

if [[ $P0 == "all" ]]; then
    P0=1; P1=1; P2=1
fi

# =====================================================================
if [[ $P0 == 1 ]]; then
    echo -e "$LL[+] clean\n"
    rm -f ./*.o 
    rm -f ./*.bin 
    rm -f ./*.iso

fi

# =====================================================================
OPT="-O2"
#OPT=""

GCC_PARAMD="-m32 -nostdlib -fno-builtin -fno-exceptions -fno-leading-underscore"
GCC_PARAMD_2="-ffreestanding $OPT -std=gnu99 -ffreestanding $OPT -Wall -Wextra"

LD_PARAMD="-T $_LD/linker.ld -m elf_i386 $OPT -nostdlib"

# SCREEN CANT INIT PROPERLY with (-shared and -ffreestanding)
#LD_PARAMD="-T linker.ld -shared -m elf_i386 -ffreestanding $OPT -nostdlib"

OBJECTS_1="$_OBJ/kernel_system.o $_OBJ/kernel_string.o $_OBJ/kernel_stdio.o $_OBJ/kernel_terminal.o $_OBJ/kernel_c.o"
OBJECTS_2="$_OBJ/kernel_idt.o $_OBJ/kernel_isr.o $_OBJ/kernel_utils.o"
OBJECTS_3="$_OBJ/kernel_gdt.o "
OBJECTS_4=""

OBJECTS_ALL=" $OBJECTS_1 $OBJECTS_2 $OBJECTS_3 $OBJECTS_4"

sync

R="\033[01;31m";
G="\033[01;32m";
B="\033[01;34m";
W="\033[01;37m";

E="\033[0m";

#pwd; ls -lah; exit;

if [[ $P1 == 1 ]]; then

    # echo $P | sed 's/-c /\n-c /g'

    P="nasm -f elf32 $_ASM/kernel.asm -o $_OBJ/kernel_asm.o"
    ALT="[$R kernel_asm.o $E] \n"; echo -e "\n $ALT $W $P $E "; $($P)



    P="gcc $GCC_PARAMD -c $_C/kernel.c -o $_OBJ/kernel_c.o $GCC_PARAMD_2"
    ALT="[$B kernel_c.o $E] \n"; echo -e "\n $ALT $W $P $E "; $($P)

    P="gcc $GCC_PARAMD -c $_C/kernel_utils.c -o $_OBJ/kernel_utils.o $GCC_PARAMD_2"
    ALT="[$B kernel_utils.o $E] \n"; echo -e "\n $ALT $W $P $E "; $($P)

    P="gcc $GCC_PARAMD -c $_C/kernel_isr.c -o $_OBJ/kernel_isr.o $GCC_PARAMD_2"
    ALT="[$B kernel_isr.o $E] \n"; echo -e "\n $ALT $W $P $E "; $($P)

    P="gcc $GCC_PARAMD -c $_C/kernel_idt.c -o $_OBJ/kernel_idt.o $GCC_PARAMD_2"
    ALT="[$B kernel_idt.o $E] \n"; echo -e "\n $ALT $W $P $E "; $($P)

    P="gcc $GCC_PARAMD -c $_C/kernel_gdt.c -o $_OBJ/kernel_gdt.o $GCC_PARAMD_2"
    ALT="[$B kernel_gdt.o $E] \n"; echo -e "\n $ALT $W $P $E "; $($P)

    P="gcc $GCC_PARAMD -c $_C/kernel_terminal.c -o $_OBJ/kernel_terminal.o $GCC_PARAMD_2"
    ALT="[$B kernel_terminal.o $E] \n"; echo -e "\n $ALT $W $P $E "; $($P)

    P="gcc $GCC_PARAMD -c $_C/kernel_stdio.c -o $_OBJ/kernel_stdio.o $GCC_PARAMD_2"
    ALT="[$B kernel_stdio.o $E] \n"; echo -e "\n $ALT $W $P $E "; $($P)

    P="gcc $GCC_PARAMD -c $_C/kernel_string.c -o $_OBJ/kernel_string.o $GCC_PARAMD_2"
    ALT="[$B kernel_string.o $E] \n"; echo -e "\n $ALT $W $P $E "; $($P)

    P="gcc $GCC_PARAMD -c $_C/kernel_system.c -o $_OBJ/kernel_system.o $GCC_PARAMD_2"
    ALT="[$B kernel_system.o $E] \n"; echo -e "\n $ALT $W $P $E "; $($P)



    P="ld $LD_PARAMD -o ../$BIN/kernel.bin $_OBJ/kernel_asm.o $OBJECTS_ALL"; 
    echo -e "\n  [$R ../$BIN/kernel.bin $E]";
    echo -e "$W ld $LD_PARAMD -o ../$BIN/kernel.bin $_OBJ/kernel_asm.o $OBJECTS_ALL $E"
    $($P)
    
    
    echo -e "$LL [$G ALL-DONE $E]\n";

    #exit;
fi

# =====================================================================
if [[ $P2 == 1 ]]; then

    cd ..
    #echo -e "ISO - Disabled\n"
    
    echo -e "$LL[+] cp kernel.bin $ROOT/boot/"
    cp $BIN/kernel.bin os/boot/

    echo -e "$LL[+] grub-mkrescue --modules=/usr/lib/grub/i386-pc/ -o os.iso\n"
    #grub-mkrescue --modules=/usr/lib/grub/i386-pc/ -o os.iso ./os/
    grub-mkrescue -o os.iso ./os/

fi

# =====================================================================


# echo -e " 1: \033[01;30m grey     \033[0m" # bold -> grey
# echo -e " 2: \033[01;31m red      \033[0m" # bold -> red
# echo -e " 3: \033[01;32m green    \033[0m" # bold -> green
# echo -e " 4: \033[01;33m yellow   \033[0m" # bold -> yellow
# echo -e " 5: \033[01;34m blue 1   \033[0m" # bold -> blue
# echo -e " 6: \033[01;35m purple   \033[0m" # bold -> purple
# echo -e " 7: \033[01;36m blue 2   \033[0m" # bold -> green-blue
# echo -e " 8: \033[01;37m white    \033[0m" # bold -> white




