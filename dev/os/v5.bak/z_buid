#!/bin/bash

# =====================================================================
R="\033[01;31m"; G="\033[01;32m"; B="\033[01;34m"; W="\033[01;37m"; E="\033[0m";

P0=$1; P1=$2; P2=$3
# =====================================================================
AS="/m-sys/_soft/x86/dev-tools/cross-gcc/gcc/bin/i386-elf-as"
GCC="/m-sys/_soft/x86/dev-tools/cross-gcc/gcc/bin/i386-elf-gcc"
LD="/m-sys/_soft/x86/dev-tools/cross-gcc/gcc/bin/i386-elf-ld"

OS_DIR="./os"
OS_BOOT_DIR="$OS_DIR/boot"
OS_GRUB_DIR="$OS_BOOT_DIR/grub"

SRC_DIR="./src"
BIN_DIR="./bin"

C_DIR="$SRC_DIR/c"
OBJ_DIR="$SRC_DIR/obj"
HDR_DIR="$SRC_DIR/h"


# =====================================================================
#$AS $SRC_DIR/boot.s -o $OBJ_DIR/boot.o
#$GCC -c $SRC_DIR/kernel.c -o $OBJ_DIR/kernel.o -std=gnu99 -ffreestanding -O2 -Wall -Wextra
#$GCC -T $SRC_DIR/linker.ld -o kernel.bin -ffreestanding -O2 -nostdlib $OBJ_DIR/boot.o $OBJ_DIR/kernel.o -lgcc
# =====================================================================
LL="----------------------------------------------------------\n"

if [[ $P0 == "" && $P1 == "" && $P2 == "" ]]; then
    echo -e "./build [ all | 1 1 1 ]";

fi

if [[ $P0 == "all" ]]; then
    P0=1; P1=1; P2=1
fi

# =====================================================================
if [[ $P0 == 1 ]]; then

    echo -e "$LL[+] clean\n"
    CMD="rm -f ./src/obj/*.o"; 
    echo -e "$R $CMD $E"; $($CMD) 
    
    CMD="rm -f ./os/boot/kernel.bin"; 
    echo -e "$R $CMD $E"; $($CMD) 
    
    CMD="rm -f ./bin/kernel.bin"; 
    echo -e "$R $CMD $E"; $($CMD) 
    
    CMD="rm -f ./os.iso"; 
    echo -e "$R $CMD $E"; $($CMD) 

    echo -e "$LL\n"

fi

# =====================================================================
OBJECTS_1="$OBJ_DIR/kernel_system.o $OBJ_DIR/kernel_string.o $OBJ_DIR/kernel_stdio.o $OBJ_DIR/kernel_terminal.o"
OBJECTS_2="$OBJ_DIR/kernel_idt.o $OBJ_DIR/kernel_isr.o $OBJ_DIR/kernel_utils.o $OBJ_DIR/kernel_ata_pio.o"
OBJECTS_3="$OBJ_DIR/kernel_gdt.o $OBJ_DIR/kernel_timer.o $OBJ_DIR/kernel_os.o $OBJ_DIR/kernel_acpi.o "
OBJECTS_4="$OBJ_DIR/kernel_dev_mod.o $OBJ_DIR/kernel_fat32.o "

OBJECTS_ALL=" $OBJECTS_1 $OBJECTS_2 $OBJECTS_3 $OBJECTS_4"

# ---------------------------------------------------------------------------------------------
GCC_FLAGS=" -std=gnu99 -ffreestanding -O2 -Wall -Wextra"

LD_FLAGS="-ffreestanding -O2 -nostdlib -lgcc"
LD_CMD="$GCC -T $SRC_DIR/linker.ld -o $BIN_DIR/kernel.bin $OBJ_DIR/kernel_asm.o $OBJ_DIR/kernel_c.o $OBJECTS_ALL"


# $GCC -T $SRC_DIR/linker.ld -o kernel.bin -ffreestanding -O2 -nostdlib $OBJ_DIR/boot.o $OBJ_DIR/kernel.o -lgcc




# ---------------------------------------------------------------------------------------------
sync; # && cd $SRC

if [[ $P1 == 1 ]]; then

    # elf-as P="$AS --warn $SRC_DIR/asm/kernel.asm -o $OBJ_DIR/kernel_asm.o"
    P="nasm -f elf32  $SRC_DIR/asm/kernel.asm -o $OBJ_DIR/kernel_asm.o"
    ALT="[$R $OBJ_DIR/kernel_asm.o $E] \n"; echo -e "\n $ALT $W $P $E "; $($P)
    

    P="$GCC $GCC_FLAGS -c $C_DIR/kernel.c -o $OBJ_DIR/kernel_c.o"
    ALT="[$B $OBJ_DIR/kernel_c.o $E] \n"; echo -e "\n $ALT $W $P $E "; $($P)

    P="$GCC $GCC_FLAGS -c $C_DIR/kernel_utils.c -o $OBJ_DIR/kernel_utils.o"
    ALT="[$B $OBJ_DIR/kernel_utils.o $E] \n"; echo -e "\n $ALT $W $P $E "; $($P)

    P="$GCC $GCC_FLAGS -c $C_DIR/kernel_isr.c -o $OBJ_DIR/kernel_isr.o"
    ALT="[$B $OBJ_DIR/kernel_isr.o $E] \n"; echo -e "\n $ALT $W $P $E "; $($P)

    P="$GCC $GCC_FLAGS -c $C_DIR/kernel_idt.c -o $OBJ_DIR/kernel_idt.o"
    ALT="[$B $OBJ_DIR/kernel_idt.o $E] \n"; echo -e "\n $ALT $W $P $E "; $($P)

    P="$GCC $GCC_FLAGS -c $C_DIR/kernel_gdt.c -o $OBJ_DIR/kernel_gdt.o"
    ALT="[$B $OBJ_DIR/kernel_gdt.o $E] \n"; echo -e "\n $ALT $W $P $E "; $($P)

    P="$GCC $GCC_FLAGS -c $C_DIR/kernel_timer.c -o $OBJ_DIR/kernel_timer.o"
    ALT="[$B $OBJ_DIR/kernel_timer.o $E] \n"; echo -e "\n $ALT $W $P $E "; $($P)

    P="$GCC $GCC_FLAGS -c $C_DIR/kernel_os.c -o $OBJ_DIR/kernel_os.o"
    ALT="[$B $OBJ_DIR/kernel_os.o $E] \n"; echo -e "\n $ALT $W $P $E "; $($P)

    P="$GCC $GCC_FLAGS -c $C_DIR/kernel_ata_pio.c -o $OBJ_DIR/kernel_ata_pio.o"
    ALT="[$B $OBJ_DIR/kernel_ata_pio.o $E] \n"; echo -e "\n $ALT $W $P $E "; $($P)

    P="$GCC $GCC_FLAGS -c $C_DIR/kernel_acpi.c -o $OBJ_DIR/kernel_acpi.o"
    ALT="[$B $OBJ_DIR/kernel_acpi.o $E] \n"; echo -e "\n $ALT $W $P $E "; $($P)

    P="$GCC $GCC_FLAGS -c $C_DIR/kernel_fat32.c -o $OBJ_DIR/kernel_fat32.o"
    ALT="[$B $OBJ_DIR/kernel_fat32.o $E] \n"; echo -e "\n $ALT $W $P $E "; $($P)

    P="$GCC $GCC_FLAGS -c $C_DIR/kernel_dev_mod.c -o $OBJ_DIR/kernel_dev_mod.o"
    ALT="[$B $OBJ_DIR/kernel_dev_mod.o $E] \n"; echo -e "\n $ALT $W $P $E "; $($P)

    P="$GCC $GCC_FLAGS -c $C_DIR/kernel_terminal.c -o $OBJ_DIR/kernel_terminal.o"
    ALT="[$B $OBJ_DIR/kernel_terminal.o $E] \n"; echo -e "\n $ALT $W $P $E "; $($P)

    P="$GCC $GCC_FLAGS -c $C_DIR/kernel_stdio.c -o $OBJ_DIR/kernel_stdio.o"
    ALT="[$B $OBJ_DIR/kernel_stdio.o $E] \n"; echo -e "\n $ALT $W $P $E "; $($P)

    P="$GCC $GCC_FLAGS -c $C_DIR/kernel_string.c -o $OBJ_DIR/kernel_string.o"
    ALT="[$B $OBJ_DIR/kernel_string.o $E] \n"; echo -e "\n $ALT $W $P $E "; $($P)

    P="$GCC $GCC_FLAGS -c $C_DIR/kernel_system.c -o $OBJ_DIR/kernel_system.o"
    ALT="[$B $OBJ_DIR/kernel_system.o $E] \n"; echo -e "\n $ALT $W $P $E "; $($P)


    echo -e "\n  [$R ../$BIN_DIR/kernel.bin $E]";
    echo -e "$W $LD_CMD $LD_FLAGS $E"
    $($LD_CMD $LD_FLAGS)
    
    echo -e "$LL [$G ALL-DONE $E]\n";

    # exit;
fi

# =====================================================================
if [[ $P2 == 1 ]]; then

    echo -e "$LL[+] cp $BIN_DIR/kernel.bin $OS_BOOT_DIR"
    cp $BIN_DIR/kernel.bin $OS_BOOT_DIR

    echo -e "$LL[+] grub-mkrescue --modules=/usr/lib/grub/i386-pc/ -o os.iso\n"
    grub-mkrescue -o os.iso ./os/

fi

# =====================================================================


# echo -e " 1: \033[01;30m grey     \033[0m" # bold -> grey
# echo -e " 2: \033[01;31m red      \033[0m" # bold -> red
# echo -e " 3: \033[01;32m green    \033[0m" # bold -> green
# echo -e " 4: \033[01;33m yellow   \033[0m" # bold -> yellow
# echo -e " 5: \033[01;34m blue 1   \033[0m" # bold -> blue
# echo -e " 6: \033[01;35m purple   \033[0m" # bold -> purple
# echo -e " 7: \033[01;36m blue 2   \033[0m" # bold -> green-blue
# echo -e " 8: \033[01;37m white    \033[0m" # bold -> white




